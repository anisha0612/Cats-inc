{"version":3,"sources":["components/EachCard/EachCard.jsx","components/CardList/CardList.jsx","components/SearchBox/SearchBox.jsx","theme.js","App.js","serviceWorker.js","index.js"],"names":["useStyles","makeStyles","name","fontSize","fontWeight","email","paddingTop","card","margin","textAlign","boxShadow","padding","background","cursor","transform","EachCard","props","imgUrl","monster","id","classes","Card","className","src","alt","CardContent","Typography","CardList","monsters","map","key","textField","SearchBox","handleChange","TextField","type","placeholder","variant","onChange","theme","createMuiTheme","typography","fontFamily","App","searchEvent","e","setState","searchField","target","value","state","fetch","then","response","json","users","catch","err","console","log","this","filteredMonsters","filter","toLowerCase","includes","ThemeProvider","CssBaseline","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4SAMMA,EAAYC,YAAW,CAC3BC,KAAM,CACJC,SAAU,MACVC,WAAY,OAEdC,MAAO,CACLF,SAAU,QACVC,WAAY,OAEdE,WAAY,CACVA,WAAY,SAEdC,KAAM,CACJC,OAAQ,MACRC,UAAW,SACXC,UAAW,kCACXC,QAAS,QACTC,WACE,8EACF,UAAW,CACTC,OAAQ,UACRC,UAAW,kBAuBFC,EAlBE,SAACC,GAChB,IAAMC,EAAM,+BAA2BD,EAAME,QAAQC,GAAzC,0BACNC,EAAUpB,IAChB,OACE,6BACE,kBAACqB,EAAA,EAAD,CAAMC,UAAWF,EAAQb,MACvB,yBAAKgB,IAAKN,EAAQO,IAAKR,EAAME,QAAQhB,OACrC,kBAACuB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAYJ,UAAWF,EAAQlB,MAAOc,EAAME,QAAQhB,MACpD,kBAACwB,EAAA,EAAD,CAAYJ,UAAWF,EAAQf,OAC5BW,EAAME,QAAQb,WC7BZsB,EAVE,SAACX,GAChB,OACE,yBAAKM,UAAU,YACZN,EAAMY,SAASC,KAAI,SAACX,GACnB,OAAO,kBAAC,EAAD,CAAUY,IAAKZ,EAAQC,GAAID,QAASA,S,QCH7ClB,EAAYC,YAAW,CAC3B8B,UAAW,CACTtB,UAAW,SACXD,OAAQ,SAkBGwB,EAdG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACbb,EAAUpB,IAChB,OACE,yBAAKsB,UAAWF,EAAQW,WACtB,kBAACG,EAAA,EAAD,CACEC,KAAK,SACLC,YAAY,cACZC,QAAQ,SACRC,SAAUL,M,wBCXHM,EALDC,YAAe,CAC3BC,WAAY,CACVC,WAHS,gCC2CEC,G,wDApCb,aAAe,IAAD,8BACZ,gBAaFC,YAAc,SAACC,GACb,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXtB,SAAU,GACVmB,YAAa,IAJH,E,gEAOO,IAAD,OAClBI,MAAM,+CACHC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKT,SAAS,CAAElB,SAAU2B,OAC1CC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,Q,+BAOtB,IAAD,EAC2BG,KAAKV,MAA/BtB,EADD,EACCA,SAAUmB,EADX,EACWA,YACZc,EAAmBjC,EAASkC,QAAO,SAAC5C,GAAD,OACvCA,EAAQhB,KAAK6D,cAAcC,SAASjB,EAAYgB,kBAElD,OACE,kBAACE,EAAA,EAAD,CAAe1B,MAAOA,GACpB,kBAAC2B,EAAA,EAAD,MACA,yBAAK5C,UAAU,OACb,yCACA,kBAAC,EAAD,CAAWW,aAAc2B,KAAKhB,cAC9B,kBAAC,EAAD,CAAUhB,SAAUiC,U,GA9BZM,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrB5B,MAAK,SAAA6B,GACJA,EAAaC,gBAEd1B,OAAM,SAAA2B,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.af6f73c1.chunk.js","sourcesContent":["import React from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst useStyles = makeStyles({\n  name: {\n    fontSize: \"2em\",\n    fontWeight: \"400\",\n  },\n  email: {\n    fontSize: \"1.3em\",\n    fontWeight: \"400\",\n  },\n  paddingTop: {\n    paddingTop: \"1.2em\",\n  },\n  card: {\n    margin: \"1em\",\n    textAlign: \"center\",\n    boxShadow: \"0 3px 5px 2px rgba(0, 0, 0, .3)\",\n    padding: \"1.5em\",\n    background:\n      \"linear-gradient(to right top, #8bcdcd, #98d7c8, #ade0c1, #c7e7ba, #e5edb7);\",\n    \"&:hover\": {\n      cursor: \"pointer\",\n      transform: \"scale(1.06)\",\n    },\n  },\n});\n\nconst EachCard = (props) => {\n  const imgUrl = `https://robohash.org/${props.monster.id}?set=set4&size=200x200`;\n  const classes = useStyles();\n  return (\n    <div>\n      <Card className={classes.card}>\n        <img src={imgUrl} alt={props.monster.name} />\n        <CardContent>\n          <Typography className={classes.name}>{props.monster.name}</Typography>\n          <Typography className={classes.email}>\n            {props.monster.email}\n          </Typography>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default EachCard;\n","import React from \"react\";\nimport EachCard from \"../EachCard/EachCard.jsx\";\n\nconst CardList = (props) => {\n  return (\n    <div className=\"CardList\">\n      {props.monsters.map((monster) => {\n        return <EachCard key={monster.id} monster={monster} />;\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles({\n  textField: {\n    textAlign: \"center\",\n    margin: \"4em\",\n  },\n});\n\nconst SearchBox = ({ handleChange }) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.textField}>\n      <TextField\n        type=\"search\"\n        placeholder=\"Search Cats\"\n        variant=\"filled\"\n        onChange={handleChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\n\nconst font = '\"Berkshire Swash\", cursive';\nconst theme = createMuiTheme({\n  typography: {\n    fontFamily: font,\n  },\n});\nexport default theme;\n","import React, { Component } from \"react\";\nimport CardList from \"./components/CardList/CardList.jsx\";\nimport SearchBox from \"./components/SearchBox/SearchBox.jsx\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport theme from \"./theme.js\";\nimport \"./App.css\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchField: \"\",\n    };\n  }\n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users/\")\n      .then((response) => response.json())\n      .then((users) => this.setState({ monsters: users }))\n      .catch((err) => console.log(err));\n  }\n\n  searchEvent = (e) => {\n    this.setState({ searchField: e.target.value });\n  };\n\n  render() {\n    const { monsters, searchField } = this.state;\n    const filteredMonsters = monsters.filter((monster) =>\n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    );\n    return (\n      <ThemeProvider theme={theme}>\n        <CssBaseline />\n        <div className=\"App\">\n          <h1>Cats Inc.</h1>\n          <SearchBox handleChange={this.searchEvent} />\n          <CardList monsters={filteredMonsters} />\n        </div>\n      </ThemeProvider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}